/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface;

import Business.*;
import Business.CustomerDirectory;
import Business.Supplier;
import Business.SupplierDirectory;
import java.awt.CardLayout;
import java.awt.Component;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author cheta
 */
public class CustomerOrderJPanel extends javax.swing.JPanel {

    /**
     * Creates new form CustomerOrderJPanel
     */
    private Business business;
    private JPanel userProcessContainer;
   private ArrayList<Supplier> supplierList;
   private ArrayList<OrderItem> tempOrder;
    private Customer customer;
    //private Order order;
    
    public CustomerOrderJPanel(JPanel userProcessContainer,Business business, ArrayList<Supplier> supplierList,Customer customer) {
        initComponents();
        this.userProcessContainer=userProcessContainer;
        this.supplierList=supplierList;
        this.business=business;
        this.customer = customer;
        customerNameTextField.setText(customer.getCustomerName());
        tempOrder = new ArrayList<OrderItem>();
        
        
        //order = new Order();

        
        populateSupplierCombo();
    }

    public void populateSupplierCombo()
    {
        supplierNamejComboBox1.removeAllItems();
        for(Supplier s : supplierList)
        {
            supplierNamejComboBox1.addItem(s);
        }
            populateTable();
    }

    public void populateTable() {
        DefaultTableModel dtm = (DefaultTableModel) productjTable.getModel();
        dtm.setRowCount(0);
        Supplier supplier = (Supplier)supplierNamejComboBox1.getSelectedItem();
        for(Product p : supplier.getProductCatalog().getProductCatalog())
        {
            Object row[] = new Object[4];
            row[0]=p;
            if(p.getMarketOffer().getMarket().getMarketName().equalsIgnoreCase(customer.getMarket().getMarketName())) {
            row[2] =p.getMarketOffer().getCeilingPrice();
        }
            else
                row[2] = "---";
            row[3]=p.getQuantity();
            row[1]=p.getCeilingPrice();
            dtm.addRow(row);
        }
        
    }
    
    public void populateOrderTable() {
        DefaultTableModel model = (DefaultTableModel) orderjTable1.getModel();
        model.setRowCount(0);
        int sum = 0;
        for(OrderItem o : tempOrder) {
        sum += o.getPaidPrice();
        Object row[] = new Object[4];
        row[0] = o;
        int price = o.getQuantity()*o.getPaidPrice();
        row[1] = o.getQuantity();
        row[2] = o.getPaidPrice();
        row[3] = price;
        model.addRow(row);
        totalPriceTextField1.setText(String.valueOf(sum));
        }


        
    }
    
  
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel5 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        customerNameTextField = new javax.swing.JTextField();
        supplierNamejComboBox1 = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        productjTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        salesPriceTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        qtyjSpinner1 = new javax.swing.JSpinner();
        addToCartjButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        orderjTable1 = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        totalPriceTextField1 = new javax.swing.JTextField();
        logoutjButton = new javax.swing.JButton();
        checkOutjButton = new javax.swing.JButton();
        removejButton1 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        statusjTable2 = new javax.swing.JTable();
        checkStatusjButton1 = new javax.swing.JButton();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel5.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("ORDER PAGE");
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 940, 50));

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Supplier Name :");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 79, 115, 25));

        customerNameTextField.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        customerNameTextField.setEnabled(false);
        add(customerNameTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(603, 76, 211, 37));

        supplierNamejComboBox1.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        supplierNamejComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                supplierNamejComboBox1ActionPerformed(evt);
            }
        });
        add(supplierNamejComboBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(143, 80, 157, -1));

        productjTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product Name", "Actual Price", "Offer Price", "Quantity"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(productjTable);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(43, 131, 771, 110));

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Sales Price :");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(43, 259, 115, 25));

        salesPriceTextField.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        add(salesPriceTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 263, 68, -1));

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Qty :");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(266, 260, 72, 25));

        qtyjSpinner1.setFont(new java.awt.Font("Times New Roman", 0, 11)); // NOI18N
        add(qtyjSpinner1, new org.netbeans.lib.awtextra.AbsoluteConstraints(342, 261, 42, 25));

        addToCartjButton.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        addToCartjButton.setText("Add to Cart");
        addToCartjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addToCartjButtonActionPerformed(evt);
            }
        });
        add(addToCartjButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(614, 260, 200, -1));

        orderjTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product Name", "Quantity", "Price", "Total Amount"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(orderjTable1);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(43, 330, 771, 110));

        jLabel4.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Total Price :");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(43, 458, 115, 25));

        totalPriceTextField1.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        totalPriceTextField1.setEnabled(false);
        add(totalPriceTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 462, 111, 21));

        logoutjButton.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        logoutjButton.setText(">> LogOut");
        logoutjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutjButtonActionPerformed(evt);
            }
        });
        add(logoutjButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(33, 934, -1, -1));

        checkOutjButton.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        checkOutjButton.setText("Check Out");
        checkOutjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkOutjButtonActionPerformed(evt);
            }
        });
        add(checkOutjButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 462, 200, -1));

        removejButton1.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        removejButton1.setText("Remove");
        removejButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removejButton1ActionPerformed(evt);
            }
        });
        add(removejButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(372, 462, 200, -1));

        jLabel6.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel6.setText("Welcome :");
        add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(533, 87, -1, -1));

        statusjTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product Name", "Quantity", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(statusjTable2);

        add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(43, 574, 771, 167));

        checkStatusjButton1.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        checkStatusjButton1.setText("Check Order Status");
        checkStatusjButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkStatusjButton1ActionPerformed(evt);
            }
        });
        add(checkStatusjButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(316, 759, 200, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void addToCartjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addToCartjButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = productjTable.getSelectedRow();
        if(selectedRow<0)
        {
            JOptionPane.showMessageDialog(null, "Please select a row");
            return;
        }

        Product selectedProduct = (Product)productjTable.getValueAt(selectedRow, 0);
        int fetchQty =(Integer)qtyjSpinner1.getValue();
        if(salesPriceTextField.getText().equals(""))
        {
            JOptionPane.showMessageDialog(null, "Please enter Price..");
            return;
        }
        try {
            Integer.parseInt(salesPriceTextField.getText());
            
                }
        catch(NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Please enter Price..");
            return;
            
        }
        int salesPrice = Integer.parseInt(salesPriceTextField.getText());
        populateOrderTable();
        if(fetchQty <=0)
        {
            JOptionPane.showMessageDialog(null, "Qty cannot be less than or equal to zero");
            return;
        }
        
        
        if(fetchQty <= selectedProduct.getQuantity())
        {
            boolean alreadyPresent =false;
            for(OrderItem oi : tempOrder)
            {
                if(oi.getProduct()==selectedProduct)
                {
                    int oldAvail = selectedProduct.getQuantity();
                    int newAvail = oldAvail - fetchQty;
                    selectedProduct.setQuantity(newAvail);
                    oi.setQuantity(fetchQty+oi.getQuantity());
                    alreadyPresent = true;
                    populateTable();
                    populateOrderTable();
                    break;
                }
            }
            if(!alreadyPresent)
            {
                int oldAvail = selectedProduct.getQuantity();
                int newAvail = oldAvail - fetchQty;
                selectedProduct.setQuantity(newAvail);
                Date date = new Date();
                customer.getOrder().setIssueDate(date.toString());
                customer.getOrder().setShippingDate(date.toString());
                customer.getOrder().setStatus("Pending");
                OrderItem orderItem = customer.getOrder().addORderItem();
                tempOrder.add(orderItem);
                orderItem.setPaidPrice(salesPrice);
                orderItem.setProduct(selectedProduct);
                orderItem.setQuantity(fetchQty);
                populateTable();
                populateOrderTable();
                
            }
            
        }
        else
        {
            JOptionPane.showMessageDialog(null, "Quantity is greater than the availability", "Warning" ,JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_addToCartjButtonActionPerformed

    private void logoutjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutjButtonActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        Component[] componentArray = userProcessContainer.getComponents();
        Component component = componentArray[componentArray.length-1];
        LoginJPanel loginjpanel = (LoginJPanel)component;
        loginjpanel.reset();
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_logoutjButtonActionPerformed

    private void checkOutjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkOutjButtonActionPerformed
        // TODO add your handling code here:
        
        JOptionPane.showMessageDialog(null, "Order placed & Sent for Processing");
        
        DefaultTableModel model = (DefaultTableModel) orderjTable1.getModel();
        model.setRowCount(0);
        tempOrder.clear();
        
        
    }//GEN-LAST:event_checkOutjButtonActionPerformed

    private void removejButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removejButton1ActionPerformed
        // TODO add your handling code here:
        int selectedRow = orderjTable1.getSelectedRow();
        if(selectedRow < 0){
            JOptionPane.showMessageDialog(null,"Please select a row");
            return;
        } 
    
       OrderItem orderItem = (OrderItem) orderjTable1.getValueAt(selectedRow, 0);
      
       
       int oldAvail = orderItem.getProduct().getQuantity();
       int quantity= orderItem.getQuantity();
       int newAvail = oldAvail + quantity;
       orderItem.getProduct().setQuantity(newAvail);
       
       customer.getOrder().removeOrderItem(orderItem);
       JOptionPane.showMessageDialog(null," Item removed from the Cart successfully");
       populateOrderTable();
       populateTable();
    }//GEN-LAST:event_removejButton1ActionPerformed

    private void supplierNamejComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_supplierNamejComboBox1ActionPerformed
        // TODO add your handling code here:
        populateTable();
        
    }//GEN-LAST:event_supplierNamejComboBox1ActionPerformed

    private void checkStatusjButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkStatusjButton1ActionPerformed
        // TODO add your handling code here:
        DefaultTableModel dtm = (DefaultTableModel) statusjTable2.getModel();
        dtm.setRowCount(0);
        
        
        for(OrderItem oi : customer.getOrder().getOrderList())
        {
        Object yo[] = new Object[3];
        yo[0] = oi;
        yo[1] = oi.getQuantity();
        yo[2] = oi.getStatus();
        dtm.addRow(yo);
        
        }
    }//GEN-LAST:event_checkStatusjButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addToCartjButton;
    private javax.swing.JButton checkOutjButton;
    private javax.swing.JButton checkStatusjButton1;
    private javax.swing.JTextField customerNameTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton logoutjButton;
    private javax.swing.JTable orderjTable1;
    private javax.swing.JTable productjTable;
    private javax.swing.JSpinner qtyjSpinner1;
    private javax.swing.JButton removejButton1;
    private javax.swing.JTextField salesPriceTextField;
    private javax.swing.JTable statusjTable2;
    private javax.swing.JComboBox supplierNamejComboBox1;
    private javax.swing.JTextField totalPriceTextField1;
    // End of variables declaration//GEN-END:variables
}
